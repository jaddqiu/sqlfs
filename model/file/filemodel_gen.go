// Code generated by goctl. DO NOT EDIT.

package file

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fileFieldNames          = builder.RawFieldNames(&File{})
	fileRows                = strings.Join(fileFieldNames, ",")
	fileRowsExpectAutoSet   = strings.Join(stringx.Remove(fileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	fileRowsWithPlaceHolder = strings.Join(stringx.Remove(fileFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	fileModel interface {
		Insert(ctx context.Context, data *File) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*File, error)
		FindOneByParentDirName(ctx context.Context, parentDir int64, name string) (*File, error)
		Update(ctx context.Context, data *File) error
		Delete(ctx context.Context, id int64) error
	}

	defaultFileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	File struct {
		Id         int64          `db:"id"`          // primary key
		Name       string         `db:"name"`        // 文件名
		Type       string         `db:"type"`        // 文件类型
		ParentDir  int64          `db:"parent_dir"`  // 父目录id
		Content    sql.NullString `db:"content"`     // 文件内容
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime time.Time      `db:"update_time"` // 更新时间
	}
)

func newFileModel(conn sqlx.SqlConn) *defaultFileModel {
	return &defaultFileModel{
		conn:  conn,
		table: "`file`",
	}
}

func (m *defaultFileModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFileModel) FindOne(ctx context.Context, id int64) (*File, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fileRows, m.table)
	var resp File
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFileModel) FindOneByParentDirName(ctx context.Context, parentDir int64, name string) (*File, error) {
	var resp File
	query := fmt.Sprintf("select %s from %s where `parent_dir` = ? and `name` = ? limit 1", fileRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, parentDir, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFileModel) Insert(ctx context.Context, data *File) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, fileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Type, data.ParentDir, data.Content)
	return ret, err
}

func (m *defaultFileModel) Update(ctx context.Context, newData *File) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Type, newData.ParentDir, newData.Content, newData.Id)
	return err
}

func (m *defaultFileModel) tableName() string {
	return m.table
}
